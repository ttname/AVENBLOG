#! /usr/bin/env python
# -*- coding: utf-8
import logging
from django.shortcuts import render
from app.models import *
from django.conf import settings
from django.shortcuts import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.contrib.auth.decorators import login_required
from django.contrib import auth
from django.views.generic import View
from django.views.generic import ListView, DetailView
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

logger = logging.getLogger(__name__)

class BaseMixin(object):
    def get_context_data(self, *args, **kwargs):
        if 'object' not in kwargs or 'query' in kwargs:
            try:
                kwargs['categories'] = Category.objects.all()
                kwargs['post_list'] = Blog.objects.all()
		kwargs['aboutme'] = {'aboutme': settings.ABOUT_ME}
            except Exception as e:
                logger.exception(u'加载基本信息出错[%s]！', e)
        return kwargs

class IndexView(BaseMixin,ListView):
    template_name = 'home.html'
    model = Blog

    def get_context_data(self, **kwargs):
        paginator = Paginator(self.object_list, 2)
        kwargs['pages'] = paginator.page(self.cur_page)
        return super(IndexView, self).get_context_data(**kwargs)
    def get(self, request, *args, **kwargs):
        try:
            self.cur_page = int(request.GET.get('page', 1))
        except TypeError:
            self.cur_page = 1
        if self.cur_page < 1:
            self.cur_page = 1
        return super(IndexView, self).get(request, *args, **kwargs)


class CategoryListView(BaseMixin,ListView):
    model = Blog
    template_name = 'home.html'


    def get_context_data(self, **kwargs):
	data=self.object_list.filter(category_id=self.id)
        paginator = Paginator(data, 2)
        kwargs['pages'] = paginator.page(self.cur_page)
	logger.error(self.object_list)
        return super(CategoryListView, self).get_context_data(**kwargs)

    def get(self, request,*args, **kwargs):
        try:
            self.cur_page = int(request.GET.get('page', 1))
        except TypeError:
            self.cur_page = 1
        if self.cur_page < 1:
            self.cur_page = 1

        self.id = kwargs.get('id')
        return super(CategoryListView, self).get(request, *args, **kwargs)


class  PageView(BaseMixin,DetailView):
    object = None
    template_name = 'detail.html'
    queryset = Blog.objects.all()
    print queryset
    def get(self, request,*args, **kwargs):
        try:
	    self.id =  kwargs.get('id')    
        except Blog.DoesNotExist:
            referer = request.META.get('HTTP_REFERER')
            logger.error(u'ref[%s] [%s]访问不存在的文章：[%s]')
            context = super(PageView, self).get_context_data(**kwargs)
            return render(request, '404.html', context)
        context = self.get_context_data(object=self.object)
        return self.render_to_response(context)

    def get_context_data(self, **kwargs):
        kwargs['categories'] = Category.objects.all()
        kwargs['post'] = self.queryset.get(id=self.id)
        return super(PageView, self).get_context_data(**kwargs)


class TagsListView(IndexView):
    def get_queryset(self):
        self.tag = self.kwargs.get('tag')
        posts = Blog.objects.defer('body', 'body').filter(tags__icontains=self.tag, status=0)
        return posts

    def get_context_data(self, **kwargs):
        kwargs['title'] = self.tag + ' | '
        return super(TagsListView, self).get_context_data(**kwargs)




def AboutMe(request):
    return render(request, 'about_me.html')



